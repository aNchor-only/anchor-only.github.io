[{"categories":null,"content":"info 나 혼자 보려고 만들었다. ","date":"2020-11-12","objectID":"/archinstall/:0:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"부팅 USB 만들기 lanet 에 접속해서 최신 iso 를 다운받는다 Note\r\r젠투 같은 다른 리눅스의 iso 도 있다\r\r 들어가보면 archlinux-2020.11.01-x86_64.iso 같이 생긴게 있을텐데 클릭해서 다운받는다. 아치리눅스의 iso 파일은 그렇게 무겁지 않다. https://www.balena.io/etcher/ 에 접속해서 Balena Etcher 을 다운받는다. 모든 OS 에서 돌아가는 프로그램이다. 물건이네 이거 파일을 눌러 실행시키자. 이때 주의점은 관리자로 실행시켜야 한다 라는 것이다. 관리자로 실행시켰으면 iso 와 부팅 usb 가 될 디스크를 선택하고 Flash 를 누른다. Flash 를 누르면 usb 안의 모든 데이터가 없어진다. 새로 산 usb 나 쓸모 없는 usb, 아니면 내용물을 백업해놓고 진행한다. 그렇게 기다리다 보면 끝나있을것이다. 부팅 USB 를 만들었다! ","date":"2020-11-12","objectID":"/archinstall/:1:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"USB 를 UEFI 로 부팅 UEFI로 부팅을 해야 한다. 바이오스로 들어가야 하는데 컴퓨터마다 다르다. 보통 F2나 Delete 키다. 전원버튼 누르고 연타하다 보면 바이오스가 나올것이다. 거기서 USB 를 맨 위로 올려주면 된다. TUI 일 경우에는 + 와 - 로 올려주고, GUI 일 경우에는 마우스로 드래그하면 된다. UEFI 를 켜는 방법은 기기마다 다르니 구글링 ㄱㄱ. 잘 찾아보면 Enable EFI 같이 생긴게 있을것이다. 그리고 저장하고 나가기 (보통 F10 이다) 를 누르면 USB 로 부팅되는것을 볼 수 있다. 이런식으로 나오면 UEFI 로 부팅된게 맞다. (스샷을 위해 가상머신에서 부팅중) 이제 준비 되었다! 제대로 깔아보자 ","date":"2020-11-12","objectID":"/archinstall/:2:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"파티션 설정 lsblk로 파티션을 볼 수 있다. 깔고 싶은 파티션을 정한 뒤 cfdisk \"깔고 싶은 파티션\" loop0 이나 sdb, rom b 같은건 건드리지 말자. 램이나 usb 면 난리난다. nvme0n1 같은 식이어도 설치 할 수 있다. cfdisk /dev/EFI 시스템 위치 맨 위에 GPT 라고 나와 있어야한다. 물어보면 GPT나 Primary 를 선택한다. 있는건 전부 delete 키로 지워서 Free Space 만 남게 한다. 방향키로 아래 메뉴를 움직일 수 있다. new 에서 엔터, 1G 를 치고 엔터, 4G 를 치고 엔터, 그리고 그대로 엔터 친다. 그럼 대충 이런 모양이 나왔을것이다. 아래에서 Type 으로 위에서부터 EFI System, Linux Swap, Linux Filesystem 을 선택한다. 없다면 MBR 인것이다. 다 하고 나면 대충 이런 모양이 되었을것이다. 그 상태로 Write 에 가서 엔터, yes 를 치고 q 로 나온다. 되돌릴 수 없다 이제 파티션 설정은 끝났다. 다시 lsblk 로 확인해보자. 맞지 않다면 cfdisk 를 다시 해보고 그래도 안되면 재부팅 해야한다. ","date":"2020-11-12","objectID":"/archinstall/:3:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"포맷 mkfs.vfat -F32 /dev/EFI 시스템 파티션 위치 mkfs.ext4 -j /dev/파일시스템 위치 이렇게 나오면 된다. ","date":"2020-11-12","objectID":"/archinstall/:4:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"마운트 mkswap /dev/스왑 위치 swapon /dev/스왑 위치 mount /dev/파일시스템 위치 /mnt mkdir /mnt/boot mount /dev/EFI 시스템 위치 /mnt/boot ","date":"2020-11-12","objectID":"/archinstall/:5:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"미러 설정 nano /etc/pacman.d/mirrorlist 로 /etc/pacman.d/mirrorlist 를 수정한다. Server = 으로 시작하는 곳 윗줄 아무곳에나 Server = http://ftp.harukasan.org/archlinux/$repo/os/$arch Server = https://ftp.harukasan.org/archlinux/$repo/os/$arch 를 적는다. ctrl + x 하고 y, 엔터로 저장하고 나갈 수 있다. ","date":"2020-11-12","objectID":"/archinstall/:6:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"인터넷 연결 iwctl 으로 네트워크 설정으로 들어갈 수 있다. 왼쪽에 초록색으로 [iwd] 거리면 됨. 거기서 station wlan0 scan station wlan0 connect \"와이파이 이름\" 하고 비밀번호를 쳐주면 인터넷에 연결할 수 있다. exit 을 쳐서 iwctl 에서 나간다. ping -c 3 www.google.com 해서 아이피 나오고 하면 인터넷에 연결된것이다. ","date":"2020-11-12","objectID":"/archinstall/:7:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"기본 패키지 설치 pacstrap /mnt base base-devel linux linux-firmware nano networkmanager git curl wget vim firefox 으로 패키지들을 다운받는다. 따로 다운받고 싶으면 뒤에 이름을 붙이면 된다. ","date":"2020-11-12","objectID":"/archinstall/:8:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"genfstab genfstab : generate File System table genfstab -U /mnt \u003e\u003e /mnt/etc/fstab ","date":"2020-11-12","objectID":"/archinstall/:9:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"루트로 아치리눅스 진입 arch-chroot /mnt arch-change root ","date":"2020-11-12","objectID":"/archinstall/:10:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"locale 설정 vim /etc/locale.gen # en_US.UTF-8 앞에 주석을 없앤다 echo LANG=en_US.UTF-8 \u003e /etc/locale.conf ","date":"2020-11-12","objectID":"/archinstall/:11:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"시간 설정 date 쳐서 시간이 맞으면 스킵 date -s \"(현재 일) (현재 월) (현재 년도) (지금 시각 + 3시간):(현재 분):(현재 초)\" 예시: date -s \"13 SEP 2020 06:06:00\" ","date":"2020-11-12","objectID":"/archinstall/:12:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"기기 시간 설정 hwclock --systohc --utc ","date":"2020-11-12","objectID":"/archinstall/:13:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"로컬 시간 설정 ln -sf /usr/share/zoneinfo/Asia/Seoul /etc/localtime 서울 시간으로 맞춘다 ","date":"2020-11-12","objectID":"/archinstall/:14:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"사용자 추가 useradd -m -g users -G wheel -s /bin/bash 유저 이름 EDITOR=vim visudo 해서 #%whell ALL=(ALL) ALL 만 주석을 풀어준다. ","date":"2020-11-12","objectID":"/archinstall/:15:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"비번 설정 passwd 유저 이름 해서 사용자 비번 추가 passwd 해서 관리자 계정 비번 추가 ","date":"2020-11-12","objectID":"/archinstall/:16:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"컴퓨터 이름 설정 echo 컴퓨터이름 \u003e /etc/hostname ","date":"2020-11-12","objectID":"/archinstall/:17:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"부팅 설정 bootctl --path=/boot install vim /boot/loader/loader.conf vim 창이 뜨면 다 지우고 내용이 default arch editor 0 timeout 0 가 되도록 변경 저장하고 vim /boot/loader/entries/arch.conf 로 title ArchLinux linux /vmlinuz-linux initrd /initramfs-linux.img 가 되게 만든다. echo \"options root=PARTUUID=$(blkid -s PARTUUID -o value /dev/파일 시스템 위치) rw\"\u003e\u003e /boot/loader/entries/arch.conf 하고 cat /boot/loader/entries/arch.conf 로 확인해보면 맨 아랫줄에 options root-PARTUUID=아이디 rw 요렇게 되어있을것이다. 저장하고 systemctl enable NetworkManager exit umount -R /mnt reboot 해서 usb 빼고 부팅 되면 성공 ","date":"2020-11-12","objectID":"/archinstall/:18:0","tags":null,"title":"Archinstall","uri":"/archinstall/"},{"categories":null,"content":"영상 ","date":"2020-11-11","objectID":"/go-packagesandimports/:1:0","tags":null,"title":"Go Packages and Imports","uri":"/go-packagesandimports/"},{"categories":null,"content":"패키지 main.go 에서 Hello World 를 출력할 때 fmt.Println 으로 출력했었다. fmt 는 format 을 위한 패키지다. 그런데 왜 Println 은 첫글자가 대문자일까? ","date":"2020-11-11","objectID":"/go-packagesandimports/:2:0","tags":null,"title":"Go Packages and Imports","uri":"/go-packagesandimports/"},{"categories":null,"content":"Import 파이썬, 자바, 자바스크립트 등에서는 무언가를 import 할때 맨 위에 import 000 from 000 형식으로 import 해온다. 또 node.js 나 자바스크립트 같은것에서는 모듈을 export 해야한다. Go 에서는, function을 export 해주고 싶다면, function 을 대문자로 시작하면 된다. 또 import 받는 쪽에서도 첫글자가 대문자로 인식된다. 그러니까 첫글자가 대문자인 function 들은 다른곳에서 import 된거라고 보면 된다. ","date":"2020-11-11","objectID":"/go-packagesandimports/:3:0","tags":null,"title":"Go Packages and Imports","uri":"/go-packagesandimports/"},{"categories":null,"content":"영상 main.go 를 만들었다. 중요\r\rgo 프로젝트를 컴파일 하고 싶다면 파일 이름을 main.go 로 해야한다. example.go 같은 경우에는 컴파일이 되지 않는다.\r\r main.go 의 맨 윗줄에 package main 이라고 작성한다. Go 에서는 어떤 패키지를 사용하는지 알려주어야 한다. 또 Node.js 나 Python 과 달리 특정한 function 을 찾는다. package main func main() { } ","date":"2020-11-11","objectID":"/go-helloworld/:1:0","tags":null,"title":"Go Hello World","uri":"/go-helloworld/"},{"categories":null,"content":"Hello World Hello World 를 프린트해보자. function 안에 fmt.Println('Hello World!')를 쓴 뒤 package 뒤에 import “fmt” 를 쓴다. fmt 가 뭔지는 다음에. package main import \"fmt\" func main() { fmt.Println(\"Hello World!\") } go run main.go 로 작동시켜보면 PS C:\\Go\\PJCT\u003e go run main.go Hello World! 잘 작동한다! ","date":"2020-11-11","objectID":"/go-helloworld/:2:0","tags":null,"title":"Go Hello World","uri":"/go-helloworld/"},{"categories":null,"content":"\r","date":"2020-11-09","objectID":"/about/:0:0","tags":null,"title":"About","uri":"/about/"},{"categories":null,"content":"영상 ","date":"2020-11-07","objectID":"/go-installation/:1:0","tags":null,"title":"Go Installation","uri":"/go-installation/"},{"categories":null,"content":"Go 다운받기 https://golang.org/ 로 접속한다. 리눅스라면 sudo apt install go sudo dnf install go yay -S go sudo pacman -S go aur 주소\r\rhttps://www.archlinux.org/packages/community/x86_64/go/\r\r 맥은 brew install golang 하면 될거고 윈도우는 choco install go 하면 될듯 ","date":"2020-11-07","objectID":"/go-installation/:2:0","tags":null,"title":"Go Installation","uri":"/go-installation/"},{"categories":null,"content":"환경변수 추가 맥 mkdir -p $HOME/go/{bin,src,pkg} export GOPATH=$HOME/go export GOROOT=\"$(brew --prefix golang)/libexec\" export PATH=\"$PATH:${GOPATH}/bin:${GOROOT}/bin\" https://medium.com/@jimkang/install-go-on-mac-with-homebrew-5fa421fc55f5 윈도우는 Path 에 Go 를 설치한 폴더가 들어있으면 된다. Note\r\rGo 는 Go 의 Path 가 설치된 곳에서만 작동한다. 원하는 곳에 폴더를 만들어서 작업할 수 없다는 소리다. 자동적으로 생성되는 Go Path 디렉토리는 C:\\Go 지만 환경변수를 수정해 D 드라이브로 바꿨다. 그래서 C:\\Go 안의 특정 폴더 안에서 작업을 해야 한다.\r\r Go 는 Node.js 나 Python 같이 모듈이나 패키지를 다운받을 수 있는곳이 제한적이다. npm 이나 pypi 등등. Go 는 그런거 없다. 그렇기 때문에 코드를 다운받을, 업로드 할 도메인으로 깔끔하게 정리한다. src 안에 자신의 깃허브 주소로 디렉터리를 만들고 프로젝트 이름으로 디렉터리를 만든다. 그리고 그 안에 main.go 를 생성하고 vscode 로 열면 install 같은게 많이 나올텐데 모두 하면 된다. ","date":"2020-11-07","objectID":"/go-installation/:3:0","tags":null,"title":"Go Installation","uri":"/go-installation/"},{"categories":null,"content":"영상 이 글은 나 혼자 보려고 노마드코더의 GO 강의를 문서화 시킨 것이다. 나중에 까먹거나 할때 즈음에 다시 훑어보면서 되짚어볼 생각이다. 영상에서는 다른 언어 부터 배우고 오는게 좋다고 했지만, 나는 거의 안배우고 바로 GO로 들어갔다. 모아보기 링크 ","date":"2020-11-07","objectID":"/go-introduction/:1:0","tags":null,"title":"Go Introduction","uri":"/go-introduction/"},{"categories":null,"content":"만들었다 히히 \r","date":"2020-11-07","objectID":"/first/:0:0","tags":null,"title":"First.md","uri":"/first/"}]